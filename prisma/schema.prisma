// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  adm       Boolean    @default(false)
  photourl  String?    
  email     String     @unique
  password  String
  active    Boolean    @default(true)  
  createdAt DateTime   @default(now())
  courses   UserCourse[]
  progress  Progress[]
  events  Event[]
  Streak  UserStreak[]
}

model UserStreak {
  id           String      @id @default(uuid())
  currentStreak Int        @default(0)  // Dias consecutivos atuais
  lastAccess   DateTime    @default(now())  // Último acesso registrado
  maxStreak    Int         @default(0)  // Maior streak já atingido

  user      User     @relation(fields: [userId], references: [id])
  userId    String
  
  @@map("userstreaks")
}

model Course {
  id          String     @id @default(uuid())
  name        String
  description String?
  banner    String?  
  createdAt   DateTime   @default(now())
  active    Boolean    @default(true)
  lessons     Lesson[]
  users       UserCourse[]
}

model UserCourse {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  enrolledAt DateTime @default(now())

  @@unique([userId, courseId])
  @@map("usercourses")
}

model Lesson {
  id          String     @id @default(uuid())
  title       String
  content     String?
  url     String?
  createdAt   DateTime   @default(now())
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    String
  progress    Progress[]
}

model Progress {
  id          String    @id @default(uuid())
  completed   Boolean   @default(false)
  completedAt DateTime?
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  lesson      Lesson    @relation(fields: [lessonId], references: [id])
  lessonId    String

  @@unique([userId, lessonId])
  @@map("progresses")
}

model Event {
  id          String    @id @default(uuid())
  title       String
  date        String
  place       String
  duration    String
  createdAt   DateTime   @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@map("events")
}